#version 330 core
out vec4 FragColor;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shineVal;
};

struct Light{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

uniform Material material;
uniform Light light;
uniform vec3 viewPos;

void main(){
	//Ambient lighting
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

	//Difuse lighting
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.ambient * diff * vec3(texture(material.diffuse, TexCoord));

	//Specular lighting
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shineVal);
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));

	//Final texture, color and lights
	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);
}